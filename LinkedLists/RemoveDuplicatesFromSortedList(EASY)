"""
Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

Example 1:


Input: head = [1,1,2]
Output: [1,2]
"""
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def deleteDuplicates(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head

        seen = set()
        result = ListNode(0)
        curr = result

        while head:
            if head.val not in seen:
                seen.add(head.val)
                curr.next = ListNode(head.val)
                curr = curr.next
        head = head.next

        return result.next
        
"""
return the new sorted head with removed duplicates

can have negatives
list can be unsorted?
i = 1-2-3-1-4
o = 1-2-3-4
* the list is guaranteed to be sorted in ascending order.


how to delete a linkedlist?
iterate thru list remove duplicates
turn into list? 
use a set?

"""