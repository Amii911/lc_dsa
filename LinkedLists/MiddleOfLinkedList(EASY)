"""
Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
"""

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:
        slow, fast = head , head

        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

        return slow
        
"""
return the middle of linked list ; if there is two return the second one

two pointers? t = O(n) s= O(1)
start at head
while loop as long as fast and fast.next
when fast(moving 2x fast) ends slow should be at middle point


"""