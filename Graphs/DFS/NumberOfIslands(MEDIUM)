"""
Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.
"""

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        m = len(grid)
        n = len(grid[0])
        starting_color = "1"
        res = 0
        for sr in range(m):
            for sc in range(n):
                if grid[sr][sc] == starting_color:
                    res += 1
                    self.dfs(sr,sc,grid)   
        return res
    
    def dfs(self, row, col, grid):
        if not (-1 < row < len(grid)): return
        if not (-1 < col < len(grid[0])): return
        if grid[row][col] != "1": return #if false, that means grid[row][col] == "1"
        grid[row][col] = "2"
        for dr, dc in [(1,0),(0,1),(-1,0),(0,-1)]:
            self.dfs(dr + row, dc + col, grid)

        """
        grid
            
        ["1","0"]
        ["0","1"]
            
        """