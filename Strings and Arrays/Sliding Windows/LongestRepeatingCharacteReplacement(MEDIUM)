"""
You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.

Return the length of the longest substring containing the same letter you can get after performing the above operations.

 

Example 1:

Input: s = "ABAB", k = 2
Output: 4
Explanation: Replace the two 'A's with two 'B's or vice versa.
Example 2:

Input: s = "AABABBA", k = 1
Output: 4
Explanation: Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.
There may exists other ways to achieve this answer too.
 

Constraints:

1 <= s.length <= 105
s consists of only uppercase English letters.
0 <= k <= s.length
"""
class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        # Dictionary to count the frequency of characters in the current window
        char_count = {}
        max_freq = 0  # Max frequency of any character in the current window
        left = 0      # Left pointer of the sliding window
        max_length = 0  # Result: max length of valid substring
        
        for right in range(len(s)):
            # Add the character at the right pointer to the frequency count
            char_count[s[right]] = char_count.get(s[right], 0) + 1
            # Update the maximum frequency in the current window
            max_freq = max(max_freq, char_count[s[right]])
            
            # Current window size is (right - left + 1)
            # Check if the window is valid
            while (right - left + 1) - max_freq > k:
                # If invalid, shrink the window from the left
                char_count[s[left]] -= 1
                left += 1
            
            # Update the maximum length of the valid window
            max_length = max(max_length, right - left + 1)
        
        return max_length


"""
Return the len fo the longest substring containing the same letter

need to count the longest string by switching k times

"CCDCC" 1
5

"ABCADC" 2
"AAAADC" || "ABCCCC"
4

which letters I change dont matter
will always get valid input

what to consider if? edge cases? patterns? 

english:
have a count = 0 #keepinng track of
iterate thru the string 
or keep track of letter count as hashmap?
{A:2 , B:2} if k = 2... can change two see which two I can change that could give longest?

"""