"""
You are given a 0-indexed 2D matrix grid of size m x n, where (r, c) represents:

A land cell if grid[r][c] = 0, or
A water cell containing grid[r][c] fish, if grid[r][c] > 0.
A fisher can start at any water cell (r, c) and can do the following operations any number of times:

Catch all the fish at cell (r, c), or
Move to any adjacent water cell.
Return the maximum number of fish the fisher can catch if he chooses his starting cell optimally, or 0 if no water cell exists.

An adjacent cell of the cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) or (r - 1, c) if it exists.

 

Example 1:


Input: grid = [[0,2,1,0],[4,0,0,3],[1,0,0,4],[0,3,2,0]]
Output: 7
Explanation: The fisher can start at cell (1,3) and collect 3 fish, then move to cell (2,3) and collect 4 fish.
Example 2:


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1]]
Output: 1
Explanation: The fisher can start at cells (0,0) or (3,3) and collect a single fish.
"""

def findMaxFish(grid):
    def dfs(r, c):
        # If the cell is out of bounds or is land (0), stop exploring
        if r < 0 or r >= m or c < 0 or c >= n or grid[r][c] == 0:
            return 0
        
        # Collect all fish at the current cell
        fish = grid[r][c]
        grid[r][c] = 0  # Mark the cell as visited (land)
        
        # Explore all 4 adjacent cells and collect fish
        fish += dfs(r + 1, c)  # Down
        fish += dfs(r - 1, c)  # Up
        fish += dfs(r, c + 1)  # Right
        fish += dfs(r, c - 1)  # Left
        
        return fish

    m, n = len(grid), len(grid[0])
    max_fish = 0

    # Try starting from every water cell
    for r in range(m):
        for c in range(n):
            if grid[r][c] > 0:  # Water cell with fish
                max_fish = max(max_fish, dfs(r, c))
    
    return max_fish
