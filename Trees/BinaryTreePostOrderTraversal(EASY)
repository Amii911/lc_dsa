"""
Given the root of a binary tree, return the postorder traversal of its nodes' values.

Example 1:

Input: root = [1,null,2,3]

Output: [3,2,1]

Explanation:



Example 2:

Input: root = [1,2,3,4,5,null,8,null,null,6,7,9]

Output: [4,6,7,5,2,9,8,3,1]

Explanation:


Example 3:

Input: root = []

Output: []

Example 4:

Input: root = [1]

Output: [1]

Constraints:

The number of the nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
"""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if root == None:
            return []

        result = []
        self.postOrderTrav(root, result)

        return result

    def postOrderTrav(self, node, result):
        if node.left:
            self.postOrderTrav(node.left, result)

        if node.right:
            self.postOrderTrav(node.right, result)


        result.append(node.val)
        








"""
root = [1, null, 2, 3]

res = [3,2,1]
1st call postoderTrav(1,null,2,3)
node = TreeNode{ val : 1, left : None, right: TreeNode {val: 2, left: {...} right: None} }

2nd call postorderTrav(2,3)
node = TreeNode{ val: 2, left : TreeNode {val: 3, left: None, rigth: None} , right:None}

3rd call postorderTrav(3)
node = TreeNode{ val: 3, left: None, right: None}



return the postorder traversal 
    [l,r,root]

res = []
stack = [] 

"""