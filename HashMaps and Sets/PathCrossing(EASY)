"""
Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.

Return true if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited. Return false otherwise.
Example 1:


Input: path = "NES"
Output: false 
Explanation: Notice that the path doesn't cross any point more than once.
"""

class Solution:
    def isPathCrossing(self, path: str) -> bool:
        directions = {
            "N" : (0, 1),
            "S" : (0, -1),
            "E" : (1, 0),
            "W" : (-1, 0)
        }

        x = 0 
        y = 0 

        visited = set()
        visited.add((x,y))

        for char in path:
            dx, dy = directions[char]
            x += dx
            y += dy

            if (x,y) in visited:
                return True
            visited.add((x,y))
        return False







"""
return T or F if the path crosses a previous path 
will be given a string 

english?
create direction map to direct what each  N S E W means

have a starting point
set for coordinates visited
iterate thru string
the corrd gets updated to current corrdinates
add corrd to visited 

(0,0)
hashmap?
N = 0, 1
W = -1, 0
E = 1, 0
S = 0, -1

*every move need to track x and y for new location 
"""