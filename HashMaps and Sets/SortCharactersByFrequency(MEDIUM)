"""
Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
"""

class Solution:
    def frequencySort(self, s: str) -> str:
        count_char = defaultdict(int)

        for i in range(len(s)):
            count_char[s[i]] += 1

        sorted_chars = sorted(count_char.items(), key=lambda item: item[1], reverse=True)

        ans = ''.join(char * freq for char, freq in sorted_chars)

        return ans






"""
return the sorted str

str must be sorted based on freq, and in decreasing order *so what is seen most should rint first in ans*
can return the sort in any order *tis good or no?*

"aabcddde"
"dddaabce"

"acb" if no freq return str the same?
"acb"?

there will be upper and lower case, hotdog!
THEY ARE TREATED AS DIFF CHARCTERS!
"AaaaBCcccc"
"ccccaaaABC"

need to check the freq or each letter = hashmap O(1)
look at the freq 
once i have freq need to sort the s[i] O(nlogn)
" ".join to build the ans
"""
        