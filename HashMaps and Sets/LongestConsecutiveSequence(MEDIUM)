"""
Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

 

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
Example 2:

Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
"""
class Solution:
    def longestConsecutive(self, nums: List[int]) -> int:
        numSet = set(nums)
        longest = 0

        for num in numSet:
            if (num - 1) not in numSet:
                length = 1
                while (num + length) in numSet:
                    length += 1
                longest = max(length, longest)
        return longest

"""
reutrn the longest consective elements in the input list

NO SORTING- must solve O(n)

not counting duplciates

[6,100,200,4,5]
3 (4,5,6)

need to know that n and n + 1 is in list
and keep track of when i see n+1 in the list 


* use a set to find longest consecutive sequences
 * iterate over set to prevent duplicate calculations
 * beginning of the sequence is when the value before num does not exist
 * increase count when num + 1 exists in the set
   increment num
   compare count to max
   return max
"""